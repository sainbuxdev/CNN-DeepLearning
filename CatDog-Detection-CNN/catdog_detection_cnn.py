# -*- coding: utf-8 -*-
"""CatDog-Detection-CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ccFdBYFkQ1UI0lkAOc1xMfl4niEdAQzE
"""

from google.colab import drive
drive.mount('/content/drive')

from zipfile import ZipFile
file_name = '/content/drive/MyDrive/Cat-Dog-dataset.zip'
with ZipFile(file_name,'r') as zip:
     zip.extractall()
     print('finish')

!pip install -q keras

import keras
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import Dense
from keras.layers import Flatten
from keras.layers import MaxPooling2D

CNN_model = Sequential()

CNN_model.add(Conv2D(32, kernel_size=(3, 3), input_shape=(64, 64, 3), activation='relu'))
CNN_model.add(MaxPooling2D(pool_size=(2,2)))

CNN_model.add(Conv2D(16,3,3,activation='relu'))
CNN_model.add(MaxPooling2D(pool_size=(2,2)))

CNN_model.add(Flatten())

CNN_model.add(Dense(units=128, activation='relu'))
CNN_model.add(Dense(units=1, activation='sigmoid'))

CNN_model.compile(optimizer='adam',loss='binary_crossentropy', metrics = ['accuracy'])

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)
train_set = train_datagen.flow_from_directory(
        '/content/Cat-Dog-dataset/training_set',
        target_size=(64, 64),
        batch_size=16,
        class_mode='binary')
test_set= test_datagen.flow_from_directory(
        '/content/Cat-Dog-dataset/test_set',
        target_size=(64, 64),
        batch_size=16,
        class_mode='binary')
CNN_model.fit(
        train_set,
        steps_per_epoch=500,
        epochs=20,
        validation_data=test_set,
        validation_steps=125)

import numpy as np
from tensorflow.keras.preprocessing import image
from keras.applications.vgg16 import preprocess_input

test_img = image.load_img('/content/test-dog.jpg', target_size=(64,64))
test_img = image.img_to_array(test_img)
test_img = np.expand_dims(test_img, axis = 0)

image_array = preprocess_input(test_img[np.newaxis, ...])

result = CNN_model.predict(test_img)

if result[0] > 0.5:
    print("Prediction: Dog")
else:
    print("Prediction: Cat")

